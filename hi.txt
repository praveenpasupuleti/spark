come on
https://0x0fff.com/spark-architecture/

hello
object my 
{
	private var m:Int=876

	def display()
	{
	var o:my=new my
	println("value is singleton object"+o.d)
	}
}
class my
{
	import my._
	private var d:Int=123
	def show()
	{
	println("value:"+m)
	}
}
object hello
{
	def main(args:Array[String])
	{
	var ob:my=new my
	ob.show()

	my.display()
	}
}

output:
value:876
value is singleton object123

*singleton object are single use class, we cannot create instance of singleton object.
* At execution time a object will be created with that definition.
* how to use that properties from outside of that singleton object as my.m
* create a class same name as singleton object is companion object.
* so that class can access private variables from singleton object.
* companion object can access private data member of it's companion class.
------------------------------------------------------------------------------------------------------------------------------
traits:

trait one
{
	def show()
}
class two extends one 
{
	def show()
	{
	println("show function called")
	}
}
object my
{
	def main(args: Array[String])
	{

	var ob:two=new two
	ob.show()
	}
}
notes:
*created trait without definition. trait can't be instantiate
*abstract class can't be instantiate.
*object can be static
---------------------------------------------------------------------------------------------------------------------------
multiple traits:

trait one 
{
	var x:Int // abstract field
	var y:Int = 12 // concrete field
	
	def fun()
}
trait two
{
	def show()
}
class three extends one with two
{
       // since variable x in trait then of type Int is not defined (Note that variables need to be initialized to be defined), so defined here as below
	var x=12
	def fun()
	{
		println("fun function")
	}
	def show()
	{
	}
}
object my
{
	def main(args: Array[String])
	{
		var t:three = new three
		t.fun()
	}
}

notes:
* multiple classes and multiple traits can be extends
* we can multiple traits and classes in single class
* abstract member may not have private variable i.e private var x:Int will not works
* concrete fields can have private variable i.e private var y:Int will works.
* all abstract fields needs to defined in the class to use

important notes:
how to instantiate
/*
var t:three = new three
    t.func()
    */
* Here "t" is variable, instantiated class "three" because we are returning that class information and used "func()" function we are returning that function information.
-------------------------------------------------------------------------------------------------------------------------------
variables:
No primitive datatypes, All variables are objects
A variable of a non-primitive type doesn't contain the value directly; instead, it is a reference (similar to a pointer) to an object. (It is not possible in Java to create user-defined value types). Java has eight primitive types: byte , short , int , long , char , boolean , float and double
Examples: var x:Int = 1 // we can changed this value
	       Var name:String = “Praveen”
	       val y:Int = 2 // we can’t change this value
                var z = 10.2 // type inference(scala figure out data type) 
Examples:
object variables {
  
  def main(args: Array[String]){
    var a:Int=10
    val b:Int=5
    
    a=12
    //b=6 (not allow us to assign value here, because it shows "reassignment to val") 
    println("a value: "+a)
    println("b value: "+b)
  }  
}
output:
a value: 12
b value: 5
-------------------------------------------------------------------------------------------------------------------------------		
class:
In class we can declare variables and define methods.
Example-1:
class student{
  var name:String = "praveen"
  var age:Int = 25
  
  def show()= {
   println("Name: "+name)
   println("Age: "+age)
 }
}
object hello1{
  def main(args: Array[String]){
    //here “s” is an object or variable, we created object that object will referred by variable “s”.
    var s = new student
    s.show()
  } 
}

Example-2: 
// to create constructor for the class make parameterize class and pass parameters and datatypes
class student(a:String,b:Int){
// simply assign object created by these parameters
  var name:String = a
  var age:Int = b
  
  def show()= {
   println("Name: "+name)
   println("Age: "+age)
 }
}
object hello1{
  def main(args: Array[String]){
//initialize object here and pass values here
    var s = new student("praveen",25)
    s.show()
  } 
}
-----------------------------------------------------------------------------------------------------------------------------------
How to create multiple constructors in a single class:
class account(ac_id:Int, name:String, balance:Double){
  //if programmer not specifying balance
  def this(a:Int,n:String){
   //call primary constructor
    this(a,n,0)
  }
  def this(a:Int){
  this(a,"",0)
}
  def this(){
    this(0,"",0)
  }
  // to return some outputs need this function
  def show(){
    println("Name: "+name)
    println("Act_id: "+ac_id)
    println("Bal: "+balance)
  }
}
object multiple_constructors {
  def main(args: Array[String]){
    var a=new account(12,"john",10000)
    // to display output from above function need show()
    a.show()
    var b=new account(13,"carls")
    b.show()
    var c=new account(14)
    c.show()
  }
  }
---------------------------------------------------------------------------------------------------------------------------------
Default arguments:
object default_arguments {  
  def main(args: Array[String]){
    fun("First", "Second")
    fun("John") 
  }
  def fun(one:String="UnKnown", two:String="UnKnown"){
    println(one+"  "+two)
  }
}

Note:
•	default arguments are arguments with default values, that values will be used when ever that function called without specific arguments.
•	You can’t change the order of that arguments.
----------------------------------------------------------------------------------------------------------------------------------
Named Arguments:
object namedArguments {
  def main(args: Array[String]){
// you can pass arguments by specifying name as well
   printName(fName="praveen",lName="pasupuleti")
// you can change order of these arguments.
   printName(lName="pasupuleti",fName="praveen")
    }
   def printName(fName:String, lName:String){
     println("Name: "+fName+ " "+lName)   
  } 
}
-----------------------------------------------------------------------------------------------------------------------------------
Arrays:
object array {
  def main(args: Array[String]){
    //var {arrayname}:{arraydatatype}=new{arraydatatype}(allocatespace)
    var myarray:Array[Int]=new Array[Int](3)
    //assign values
    myarray(0)=12
    myarray(1)=13
    myarray(2)=14
    /*
    for (i <-0 to 2)
    {
      println(myarray(i))
    }*/
    for (i <- myarray){
      println(i)
    }
  }
}
------------------------------------------------------------------------------------------------------------------------------------
// multiDimensional Array
object array {
  def main(args: Array[String]){
     // if you want to store matrix we go with these multiDimensional array
    var darray=Array.ofDim[Int](2,2)
    //store values into this Array
    darray(0)(0)=12
    darray(0)(1)=13
    darray(1)(0)=14
    darray(1)(1)=15
    
    var i:Int=0
    var j:Int=0
    
    while(i<2){
      while(j<2)
        println(darray(i)(j))
    }
    /*
    for (i <-0 to 1; j <-0 to 1){
      println(darray(i)(j))
    }
    */ 
  }
}
-------------------------------------------------------------------------------------------------------------------------------
Diamond Problem:
trait first {
  def show(){
    println("show trait first function")
  }
}
trait second extends first {
  override def show(){
    println("show trait second function")
  }
}
trait third extends first {
  override def show(){
    println("show trait third function")
  }
}
class fourth extends second with first // output = show trait second function

object diamondProblem {
  def main(args: Array[String]){
    var to:fourth = new fourth
    to.show()
  }
}
Note:- scala reads farthest or right side of the traits 
//class fourth extends third with first // output = show trait third function
//class fourth extends third with second // output = show trait second function
--------------------------------------------------------------------------------------------------------------------------------
Anonymous functions:- Anonymous funtions in sourcecode are called function literals at run time, function literals are instantiated into objects
object anonymousFunction {
  
  def main(args: Array[String]){
    var f =(x:Int,y:Int)=>{"value: "+(x*y)}
    println(f(5,5))
  }
}
note:-
A function that doesn't have any name is called anonymous function.
i.e left side write what type parameters used => right side write logic to return 
Above we passed values at time of function calling.
--------------------------------------------------------------------------------------------------------------------------------
High Order functions:- The functions that takes other functions as parameters and whose result is a function.
object highOrderFunction {
  // create anonymous function
  def perform(f:(Int,Int)=>Int){
      println(f(5,5)) 
    }
    
  def main(args: Array[String]){
    // passed anonymous as parameter here,so it is called high order function.
    perform((x:Int,y:Int)=>x*y)
  }
}
Note:-
As function is instantiated into object that object will stored in "f"(here, f is representing as object).
here "perform" is function, "f" is object, anonymous function takes two parameters (Int, Int)and returns type (Int)
you can change the logic at the time of passing argument.
----------------------------------------------------------------------------------------------------------------------------
Currying function:- A function that takes multiple parameter function into function which will take a single parameter and return data type for that function will be an anonymous function which is going to take the remaining parameter

object currying {
  //def add(a:Int,b:Int)={a+b}
  def add(a:Int)={(b:Int)=>a+b}
  
  def main(args: Array[String]){
  println("Result: "+add(5)(5))
  }
}
Note:-
 * when ever you convert function into the form, which will takes single parameter so the return data type of that function will be closure function.
 * here is the example: add(a:Int,b:Int)={a+b} convert this function as add(a:Int)={(b:Int)=>a+b}
 --------------------------------------------------------------------------------------------------------------------------------
 Pattern Maching:-  scala has inbuilt pattern matching.here, print something when matches with case statements. 
 
 Example-1:do pattern matching using variable creation.
 object patternMaching {
  def main(args: Array[String]){
    var i:Int=1
    i match
    {
      case 1=> print("first case")
      case 2=> print("second case")
      case _=> print("default case")
    }  
  }
}
output:- first case
Example-2:- do pattern macthing by defining function.
object patternMaching {
  def find(x:Int):String=x match{
    case 1=>"Hello"
    case 2=>"World"
    case _=>"Default"
  }
  def main(args: Array[String]){
    print(find(3))
  }
}
output:- Default
Example-3:- do pattern matching by giving "Any" as argument.
object patternMaching {
  def find(x:Any):Any=x match{
    case 1=>"Hello"
    case "John"=>"Hi John"
    case 2.3=>2.3+1
  }
  def main(args: Array[String]){
    print(find(2.3))
  }
}
output:- 3.3
------------------------------------------------------------------------------------------------------------------------------
Closure:- closure is a function which takes values from outside of that function.

object closure {
  def main(args: Array[String]){
    var f:Int=10
    val a=(x:Int)=>x*f
    print(a(10))
  }
}
output: 100
Note:- Here, in above example shows created anonymous function, and that anonymous taking "f" value from outside.
------------------------------------------------------------------------------------------------------------------------------
Exception Handling:-
object exceptionHandling {
  
  def main(args: Array[String]){
     var a:Int=5
     var b:Int=0
     try{
       println(a/b)
     }
     catch{
       case ex:ArithmeticException=>print("Exception is generated")
     }
  }
}
* catch syntax:- case {placeholder}:type
* here, "placeholder" which refers to the exception. And "type" is type of exception.
-------------------------------------------------------------------------------------------------------------------------------
collections:-
example-1:
object collections {
  def main(args: Array[String]){
    var a=List(1,2,3)
    // left side specify element(eg: 4) :: right side specify list variable(eg: Nil), and new list will be stored in "b".
    var b=4::5::6::Nil
    // Here, we iterate every elements on list "a" and storing on temp variable "t"
    for(t<-b){
      println(t)
    }
  }
}
output:
4
5
6
example-2:
object collections {
  def main(args: Array[String]){
    var a=List(1,2,3)
    // left side specify element(eg: 4) :: right side specify list variable(eg: Nil), and new list will be stored in "b".
    var b=4::5::6::Nil
    // here foreach will automatically create the temp variable.
    a.foreach{
      //println
      // Here "_" is scala temp variable which takes every element one-by-one
     println(_)
    }
  }
}
output:
1
2
3
Note:-
*left side specify element(eg: 4) :: right side specify list variable(eg: Nil), and new list will be stored in "b"
* Here, we iterate every elements on list "a" and storing on temp variable "t"
* we using two methods to iterate lists like using "for loop" and  "foreach".
* here foreach will automatically create the temp variable.
* we can also give scala temp variable(i.e "_"), if you want to add every element for example a constant and to print that. 
---------------------------------------------------------------------------------------------------------------------------------
use of range, tabulate, fill, merging List functions:
object listCollection {
  def main(args: Array[String]){
    var a=List.range(1,10) // List(1, 2, 3, 4, 5, 6, 7, 8, 9)
   //var a=List.range(1,10,2) // List(1, 3, 5, 7, 9)
    var b=List.tabulate(10){a=>a*a} //List(0, 1, 4, 9, 16, 25, 36, 49, 64, 81)
    var c=List.fill(5){12} // List(12, 12, 12, 12, 12)
    var d=b:::c // List(0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 12, 12, 12, 12, 12)
    print(d)
  }
}
Note
 * range:- syntax List.range(first element, last element, third parameter to change step size)
 * last element will not included in the list if you are using range function means. Here, third parameter will add to each and every element in the List.
 * Like this example actually program output shows like this List(1, 3, 5, 7, 9) internally happens like this (1, 1+2=3,3+3=5,5+2=7,7+2=9)
 
 * tabulate:- List.tabulate(no of total elements){specify logic}
 * fill:- List.fill(no of total elements){what elements you insert}
 * merging:- variable name = list one:::list two
 -------------------------------------------------------------------------------------------------------------------------------
 Immutable map class:
 object map {
  def main(args: Array[String]){
    var marks=Map("praveen"->123,"sampath"->321) // key:praveen, Value:123key:sampath, Value:321
    marks+=("sumiya"->420) // key:praveen, Value:123key:sampath, Value:321key:sumiya, Value:420
    marks-="sampath"  // key:praveen, Value:123key:sumiya, Value:420
    
    // here "marks" is immutable you cannot update
    //marks("praveen")=23
    
    for((k,v)<-marks)
    printf("key:%s, Value:%s",k,v)
  }
}

Note:-
 * Here marks variable is defined with variable type "var"
 * so you can add or remove elements. but you cannot update elements even though it's defined using "var"
 * To update you have to define like shown i.e var marks=scala.collection.mutable.Map("praveen"->123,"sampath"->321) output: key:sumiya, Value:420key:praveen, Value:23
----------------------------------------------------------------------------------------------------------------------------------
mutable map class:-
object mutableMap {
  def main(args: Array[String]){
    val marks=scala.collection.mutable.Map("john"->23,"carles"->24)
    // to add elements
    marks+=("pan"->34)
    // to update elements
    marks("john")=25
    
    for((k,v)<-marks)
      printf("%s->%s",k,v)
   
    }
}
output:- pan->34john->25carles->24
Note:-
 *Here variable marks is defined using "val" but actually created using scala.collection.mutable.Map
 * So you can be add, remove and update the elements
 --------------------------------------------------------------------------------------------------------------------------------
 
 
