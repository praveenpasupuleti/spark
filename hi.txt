come on
https://0x0fff.com/spark-architecture/

hello
object my 
{
	private var m:Int=876

	def display()
	{
	var o:my=new my
	println("value is singleton object"+o.d)
	}
}
class my
{
	import my._
	private var d:Int=123
	def show()
	{
	println("value:"+m)
	}
}
object hello
{
	def main(args:Array[String])
	{
	var ob:my=new my
	ob.show()

	my.display()
	}
}

output:
value:876
value is singleton object123

*singleton object are single use class, we cannot create instance of singleton object.
* At execution time a object will be created with that definition.
* how to use that properties from outside of that singleton object as my.m
* create a class same name as singleton object is companion object.
* so that class can access private variables from singleton object.
* companion object can access private data member of it's companion class.
------------------------------------------------------------------------------------------------------------------------------
traits:

trait one
{
	def show()
}
class two extends one 
{
	def show()
	{
	println("show function called")
	}
}
object my
{
	def main(args: Array[String])
	{

	var ob:two=new two
	ob.show()
	}
}
notes:
*created trait without definition. trait can't be instantiate
*abstract class can't be instantiate.
*object can be static
---------------------------------------------------------------------------------------------------------------------------
multiple traits:

trait one 
{
	var x:Int // abstract field
	var y:Int = 12 // concrete field
	
	def fun()
}
trait two
{
	def show()
}
class three extends one with two
{
	var x=12
	def fun()
	{
		println("fun function")
	}
	def show()
	{
	}
}
object my
{
	def main(args: Array[String])
	{
		var t:three = new three
		t.fun()
	}
}

notes:
* multiple classes and multiple traits can be extends
* we can multiple traits and classes in single class
* abstract member may not have private variable i.e private var x:Int will not works

important notes:
how to instantiate
/*
var t:three = new three
    t.func()
    */
* Here "t" is variable, instantiated class "three" because we are returning that class information and used "func()" function we are returning that function information.
-------------------------------------------------------------------------------------------------------------------------------
variables:
No primitive datatypes, All variables are objects
Examples: var x:Int = 1 // we can changed this value
	       Var name:String = “Praveen”
	       val y:Int = 2 // we can’t change this value
                var z = 10.2 // type inference(scala figure out data type) 
-------------------------------------------------------------------------------------------------------------------------------		
class:
In class we can declare variables and define methods.
Example-1:
class student{
  var name:String = "praveen"
  var age:Int = 25
  
  def show()= {
   println("Name: "+name)
   println("Age: "+age)
 }
}
object hello1{
  def main(args: Array[String]){
    //here “s” is an object or variable, we created object that object will referred by variable “s”.
    var s = new student
    s.show()
  } 
}

Example-2: 
// to create constructor for the class make parameterize class and pass parameters and datatypes
class student(a:String,b:Int){
// simply assign object created by these parameters
  var name:String = a
  var age:Int = b
  
  def show()= {
   println("Name: "+name)
   println("Age: "+age)
 }
}
object hello1{
  def main(args: Array[String]){
//initialize object here and pass values here
    var s = new student("praveen",25)
    s.show()
  } 
}
-----------------------------------------------------------------------------------------------------------------------------------
How to create multiple constructors in a single class:
class account(ac_id:Int, name:String, balance:Double){
  //if programmer not specifying balance
  def this(a:Int,n:String){
   //call primary constructor
    this(a,n,0)
  }
  def this(a:Int){
  this(a,"",0)
}
  def this(){
    this(0,"",0)
  }
  // to return some outputs need this function
  def show(){
    println("Name: "+name)
    println("Act_id: "+ac_id)
    println("Bal: "+balance)
  }
}
object multiple_constructors {
  def main(args: Array[String]){
    var a=new account(12,"john",10000)
    // to display output from above function need show()
    a.show()
    var b=new account(13,"carls")
    b.show()
    var c=new account(14)
    c.show()
  }
  }
---------------------------------------------------------------------------------------------------------------------------------
Default arguments:
object default_arguments {  
  def main(args: Array[String]){
    fun("First", "Second")
    fun("John") 
  }
  def fun(one:String="UnKnown", two:String="UnKnown"){
    println(one+"  "+two)
  }
}

Note:
•	default arguments are arguments with default values, that values will be used when ever that function called without specific arguments.
•	You can’t change the order of that arguments.
----------------------------------------------------------------------------------------------------------------------------------
Named Arguments:
object namedArguments {
  def main(args: Array[String]){
// you can pass arguments by specifying name as well
   printName(fName="praveen",lName="pasupuleti")
// you can change order of these arguments.
   printName(lName="pasupuleti",fName="praveen")
    }
   def printName(fName:String, lName:String){
     println("Name: "+fName+ " "+lName)   
  } 
}
-----------------------------------------------------------------------------------------------------------------------------------
Arrays:
object array {
  def main(args: Array[String]){
    //var {arrayname}:{arraydatatype}=new{arraydatatype}(allocatespace)
    var myarray:Array[Int]=new Array[Int](3)
    //assign values
    myarray(0)=12
    myarray(1)=13
    myarray(2)=14
    /*
    for (i <-0 to 2)
    {
      println(myarray(i))
    }*/
    for (i <- myarray){
      println(i)
    }
  }
}
------------------------------------------------------------------------------------------------------------------------------------
// multiDimensional Array
object array {
  def main(args: Array[String]){
     // if you want to store matrix we go with these multiDimensional array
    var darray=Array.ofDim[Int](2,2)
    //store values into this Array
    darray(0)(0)=12
    darray(0)(1)=13
    darray(1)(0)=14
    darray(1)(1)=15
    
    var i:Int=0
    var j:Int=0
    
    while(i<2){
      while(j<2)
        println(darray(i)(j))
    }
    /*
    for (i <-0 to 1; j <-0 to 1){
      println(darray(i)(j))
    }
    */ 
  }
}
-------------------------------------------------------------------------------------------------------------------------------
